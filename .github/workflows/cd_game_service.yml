name: Build and Push Game Service to ECR

permissions:
  id-token: write

on:
  push:
    # branches:
    #   - refactor/microservice
    # branches:
    #   - testing
    #   - production
    # paths:
    #   - backend/cmd/game_service/**
    #   - backend/internal/service/game_service/**
  workflow_call:
    secrets:
      AWS_ROLE_ARN:
        required: true
      ECS_GAME_TASKDEF_ARN:
        required: true

env:
  AWS_REGION: ap-east-1
  ECR_GAME_REPO_NAME: xenoblast-game-service
  ECS_GAME_CONTAINER_NAME: GAME
  ECS_CLUSTER_NAME: xenoblast
  ECS_GAME_SERVICE_NAME: xenoblast-game_service

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

  test:
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - uses: ./.github/actions/test

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - id: build
        uses: ./.github/actions/build_tag_push
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          repo-name: ${{ env.ECR_GAME_REPO_NAME }}
          before-build-script: |
            cd backend/
          build-args: --build-arg ENTRY_PKG=./cmd/game_service
    outputs:
      image: ${{ steps.build.outputs.image }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: ./.github/actions/deploy
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          taskdef-arn: ${{ secrets.ECS_GAME_TASKDEF_ARN }}
          container-name: ${{ env.ECS_GAME_CONTAINER_NAME }}
          image: ${{ needs.build.outputs.image }}
          cluster-name: ${{ env.ECS_CLUSTER_NAME }}
          service-name: ${{ env.ECS_GAME_SERVICE_NAME }}

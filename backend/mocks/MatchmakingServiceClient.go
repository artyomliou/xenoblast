// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	matchmaking "artyomliou/xenoblast-backend/internal/pkg_proto/matchmaking"

	mock "github.com/stretchr/testify/mock"

	pkg_proto "artyomliou/xenoblast-backend/internal/pkg_proto"
)

// MatchmakingServiceClient is an autogenerated mock type for the MatchmakingServiceClient type
type MatchmakingServiceClient struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: ctx, in, opts
func (_m *MatchmakingServiceClient) Cancel(ctx context.Context, in *matchmaking.MatchmakingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *matchmaking.MatchmakingRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *matchmaking.MatchmakingRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *matchmaking.MatchmakingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Enroll provides a mock function with given fields: ctx, in, opts
func (_m *MatchmakingServiceClient) Enroll(ctx context.Context, in *matchmaking.MatchmakingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Enroll")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *matchmaking.MatchmakingRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *matchmaking.MatchmakingRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *matchmaking.MatchmakingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameServerAddr provides a mock function with given fields: ctx, in, opts
func (_m *MatchmakingServiceClient) GetGameServerAddr(ctx context.Context, in *matchmaking.GetGameServerAddrRequest, opts ...grpc.CallOption) (*matchmaking.GetGameServerAddrResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGameServerAddr")
	}

	var r0 *matchmaking.GetGameServerAddrResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *matchmaking.GetGameServerAddrRequest, ...grpc.CallOption) (*matchmaking.GetGameServerAddrResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *matchmaking.GetGameServerAddrRequest, ...grpc.CallOption) *matchmaking.GetGameServerAddrResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*matchmaking.GetGameServerAddrResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *matchmaking.GetGameServerAddrRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWaitingPlayerCount provides a mock function with given fields: ctx, in, opts
func (_m *MatchmakingServiceClient) GetWaitingPlayerCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*matchmaking.GetWaitingPlayerCountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWaitingPlayerCount")
	}

	var r0 *matchmaking.GetWaitingPlayerCountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) (*matchmaking.GetWaitingPlayerCountResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *matchmaking.GetWaitingPlayerCountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*matchmaking.GetWaitingPlayerCountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeMatch provides a mock function with given fields: ctx, in, opts
func (_m *MatchmakingServiceClient) SubscribeMatch(ctx context.Context, in *matchmaking.MatchmakingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[pkg_proto.Event], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeMatch")
	}

	var r0 grpc.ServerStreamingClient[pkg_proto.Event]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *matchmaking.MatchmakingRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[pkg_proto.Event], error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *matchmaking.MatchmakingRequest, ...grpc.CallOption) grpc.ServerStreamingClient[pkg_proto.Event]); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[pkg_proto.Event])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *matchmaking.MatchmakingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMatchmakingServiceClient creates a new instance of MatchmakingServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMatchmakingServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MatchmakingServiceClient {
	mock := &MatchmakingServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

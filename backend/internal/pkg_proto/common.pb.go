// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.12.4
// source: common.proto

package pkg_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameState int32

const (
	GameState_Init         GameState = 0
	GameState_Preparing    GameState = 1
	GameState_Prepared     GameState = 2
	GameState_WaitingReady GameState = 3
	GameState_Countdown    GameState = 4
	GameState_Playing      GameState = 5
	GameState_Gameover     GameState = 6
	GameState_Crash        GameState = 7
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0: "Init",
		1: "Preparing",
		2: "Prepared",
		3: "WaitingReady",
		4: "Countdown",
		5: "Playing",
		6: "Gameover",
		7: "Crash",
	}
	GameState_value = map[string]int32{
		"Init":         0,
		"Preparing":    1,
		"Prepared":     2,
		"WaitingReady": 3,
		"Countdown":    4,
		"Playing":      5,
		"Gameover":     6,
		"Crash":        7,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type EventType int32

const (
	EventType_SessionRun            EventType = 0
	EventType_SubscribeNewMatch     EventType = 1
	EventType_NewMatch              EventType = 2
	EventType_StatePreparing        EventType = 3
	EventType_StatePrepared         EventType = 4
	EventType_StateWaitingReady     EventType = 5
	EventType_StateCountdown        EventType = 6
	EventType_StatePlaying          EventType = 7
	EventType_StateGameover         EventType = 8
	EventType_StateCrash            EventType = 9
	EventType_WinConditionSatisfied EventType = 10
	EventType_PlayerReady           EventType = 21
	EventType_PlayerMove            EventType = 22
	EventType_PlayerGetPowerup      EventType = 23
	EventType_PlayerPlantBomb       EventType = 24
	EventType_PlayerMoved           EventType = 31
	EventType_PlayerDead            EventType = 32
	EventType_BombPlanted           EventType = 33
	EventType_BombWillExplode       EventType = 34
	EventType_BombExploded          EventType = 35
	EventType_BoxRemoved            EventType = 36
	EventType_PowerupDropped        EventType = 37
	EventType_PowerupConsumed       EventType = 38
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "SessionRun",
		1:  "SubscribeNewMatch",
		2:  "NewMatch",
		3:  "StatePreparing",
		4:  "StatePrepared",
		5:  "StateWaitingReady",
		6:  "StateCountdown",
		7:  "StatePlaying",
		8:  "StateGameover",
		9:  "StateCrash",
		10: "WinConditionSatisfied",
		21: "PlayerReady",
		22: "PlayerMove",
		23: "PlayerGetPowerup",
		24: "PlayerPlantBomb",
		31: "PlayerMoved",
		32: "PlayerDead",
		33: "BombPlanted",
		34: "BombWillExplode",
		35: "BombExploded",
		36: "BoxRemoved",
		37: "PowerupDropped",
		38: "PowerupConsumed",
	}
	EventType_value = map[string]int32{
		"SessionRun":            0,
		"SubscribeNewMatch":     1,
		"NewMatch":              2,
		"StatePreparing":        3,
		"StatePrepared":         4,
		"StateWaitingReady":     5,
		"StateCountdown":        6,
		"StatePlaying":          7,
		"StateGameover":         8,
		"StateCrash":            9,
		"WinConditionSatisfied": 10,
		"PlayerReady":           21,
		"PlayerMove":            22,
		"PlayerGetPowerup":      23,
		"PlayerPlantBomb":       24,
		"PlayerMoved":           31,
		"PlayerDead":            32,
		"BombPlanted":           33,
		"BombWillExplode":       34,
		"BombExploded":          35,
		"BoxRemoved":            36,
		"PowerupDropped":        37,
		"PowerupConsumed":       38,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

type ObstacleType int32

const (
	ObstacleType_Box   ObstacleType = 0
	ObstacleType_House ObstacleType = 1
	ObstacleType_Tree  ObstacleType = 2
	ObstacleType_Bomb  ObstacleType = 3
)

// Enum value maps for ObstacleType.
var (
	ObstacleType_name = map[int32]string{
		0: "Box",
		1: "House",
		2: "Tree",
		3: "Bomb",
	}
	ObstacleType_value = map[string]int32{
		"Box":   0,
		"House": 1,
		"Tree":  2,
		"Bomb":  3,
	}
)

func (x ObstacleType) Enum() *ObstacleType {
	p := new(ObstacleType)
	*p = x
	return p
}

func (x ObstacleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObstacleType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (ObstacleType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x ObstacleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObstacleType.Descriptor instead.
func (ObstacleType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type DecorationType int32

const (
	DecorationType_Bush DecorationType = 0
)

// Enum value maps for DecorationType.
var (
	DecorationType_name = map[int32]string{
		0: "Bush",
	}
	DecorationType_value = map[string]int32{
		"Bush": 0,
	}
)

func (x DecorationType) Enum() *DecorationType {
	p := new(DecorationType)
	*p = x
	return p
}

func (x DecorationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DecorationType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (DecorationType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x DecorationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DecorationType.Descriptor instead.
func (DecorationType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

type PowerupType int32

const (
	PowerupType_MoreBomb PowerupType = 0
	PowerupType_MoreFire PowerupType = 1
)

// Enum value maps for PowerupType.
var (
	PowerupType_name = map[int32]string{
		0: "MoreBomb",
		1: "MoreFire",
	}
	PowerupType_value = map[string]int32{
		"MoreBomb": 0,
		"MoreFire": 1,
	}
)

func (x PowerupType) Enum() *PowerupType {
	p := new(PowerupType)
	*p = x
	return p
}

func (x PowerupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerupType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (PowerupType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x PowerupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerupType.Descriptor instead.
func (PowerupType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      EventType `protobuf:"varint,1,opt,name=type,proto3,enum=common.EventType" json:"type,omitempty"`
	Timestamp int64     `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	GameId    int32     `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	// Types that are assignable to Data:
	//
	//	*Event_NewMatch
	//	*Event_Countdown
	//	*Event_GameOver
	//	*Event_Crash
	//	*Event_PlayerReady
	//	*Event_PlayerMove
	//	*Event_PlayerGetPowerup
	//	*Event_PlayerPlantBomb
	//	*Event_PlayerMoved
	//	*Event_PlayerDead
	//	*Event_BombPlanted
	//	*Event_BombWillExplode
	//	*Event_BombExploded
	//	*Event_BoxRemoved
	//	*Event_PowerupDropped
	//	*Event_PowerupConsumed
	Data isEvent_Data `protobuf_oneof:"data"`
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_SessionRun
}

func (x *Event) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Event) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (m *Event) GetData() isEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Event) GetNewMatch() *NewMatchData {
	if x, ok := x.GetData().(*Event_NewMatch); ok {
		return x.NewMatch
	}
	return nil
}

func (x *Event) GetCountdown() *CountdownData {
	if x, ok := x.GetData().(*Event_Countdown); ok {
		return x.Countdown
	}
	return nil
}

func (x *Event) GetGameOver() *GameOverData {
	if x, ok := x.GetData().(*Event_GameOver); ok {
		return x.GameOver
	}
	return nil
}

func (x *Event) GetCrash() *CrashData {
	if x, ok := x.GetData().(*Event_Crash); ok {
		return x.Crash
	}
	return nil
}

func (x *Event) GetPlayerReady() *PlayerReadyData {
	if x, ok := x.GetData().(*Event_PlayerReady); ok {
		return x.PlayerReady
	}
	return nil
}

func (x *Event) GetPlayerMove() *PlayerMoveData {
	if x, ok := x.GetData().(*Event_PlayerMove); ok {
		return x.PlayerMove
	}
	return nil
}

func (x *Event) GetPlayerGetPowerup() *PlayerGetPowerupData {
	if x, ok := x.GetData().(*Event_PlayerGetPowerup); ok {
		return x.PlayerGetPowerup
	}
	return nil
}

func (x *Event) GetPlayerPlantBomb() *PlayerPlantBombData {
	if x, ok := x.GetData().(*Event_PlayerPlantBomb); ok {
		return x.PlayerPlantBomb
	}
	return nil
}

func (x *Event) GetPlayerMoved() *PlayerMovedData {
	if x, ok := x.GetData().(*Event_PlayerMoved); ok {
		return x.PlayerMoved
	}
	return nil
}

func (x *Event) GetPlayerDead() *PlayerDeadData {
	if x, ok := x.GetData().(*Event_PlayerDead); ok {
		return x.PlayerDead
	}
	return nil
}

func (x *Event) GetBombPlanted() *BombPlantedData {
	if x, ok := x.GetData().(*Event_BombPlanted); ok {
		return x.BombPlanted
	}
	return nil
}

func (x *Event) GetBombWillExplode() *BombWillExplodeData {
	if x, ok := x.GetData().(*Event_BombWillExplode); ok {
		return x.BombWillExplode
	}
	return nil
}

func (x *Event) GetBombExploded() *BombExplodedData {
	if x, ok := x.GetData().(*Event_BombExploded); ok {
		return x.BombExploded
	}
	return nil
}

func (x *Event) GetBoxRemoved() *BoxRemovedData {
	if x, ok := x.GetData().(*Event_BoxRemoved); ok {
		return x.BoxRemoved
	}
	return nil
}

func (x *Event) GetPowerupDropped() *PowerupDroppedData {
	if x, ok := x.GetData().(*Event_PowerupDropped); ok {
		return x.PowerupDropped
	}
	return nil
}

func (x *Event) GetPowerupConsumed() *PowerupConsumedData {
	if x, ok := x.GetData().(*Event_PowerupConsumed); ok {
		return x.PowerupConsumed
	}
	return nil
}

type isEvent_Data interface {
	isEvent_Data()
}

type Event_NewMatch struct {
	NewMatch *NewMatchData `protobuf:"bytes,11,opt,name=new_match,json=newMatch,proto3,oneof"`
}

type Event_Countdown struct {
	Countdown *CountdownData `protobuf:"bytes,12,opt,name=countdown,proto3,oneof"`
}

type Event_GameOver struct {
	GameOver *GameOverData `protobuf:"bytes,13,opt,name=game_over,json=gameOver,proto3,oneof"`
}

type Event_Crash struct {
	Crash *CrashData `protobuf:"bytes,14,opt,name=crash,proto3,oneof"`
}

type Event_PlayerReady struct {
	PlayerReady *PlayerReadyData `protobuf:"bytes,21,opt,name=player_ready,json=playerReady,proto3,oneof"`
}

type Event_PlayerMove struct {
	PlayerMove *PlayerMoveData `protobuf:"bytes,22,opt,name=player_move,json=playerMove,proto3,oneof"`
}

type Event_PlayerGetPowerup struct {
	PlayerGetPowerup *PlayerGetPowerupData `protobuf:"bytes,23,opt,name=player_get_powerup,json=playerGetPowerup,proto3,oneof"`
}

type Event_PlayerPlantBomb struct {
	PlayerPlantBomb *PlayerPlantBombData `protobuf:"bytes,24,opt,name=player_plant_bomb,json=playerPlantBomb,proto3,oneof"`
}

type Event_PlayerMoved struct {
	PlayerMoved *PlayerMovedData `protobuf:"bytes,31,opt,name=player_moved,json=playerMoved,proto3,oneof"`
}

type Event_PlayerDead struct {
	PlayerDead *PlayerDeadData `protobuf:"bytes,32,opt,name=player_dead,json=playerDead,proto3,oneof"`
}

type Event_BombPlanted struct {
	BombPlanted *BombPlantedData `protobuf:"bytes,33,opt,name=bomb_planted,json=bombPlanted,proto3,oneof"`
}

type Event_BombWillExplode struct {
	BombWillExplode *BombWillExplodeData `protobuf:"bytes,34,opt,name=bomb_will_explode,json=bombWillExplode,proto3,oneof"`
}

type Event_BombExploded struct {
	BombExploded *BombExplodedData `protobuf:"bytes,35,opt,name=bomb_exploded,json=bombExploded,proto3,oneof"`
}

type Event_BoxRemoved struct {
	BoxRemoved *BoxRemovedData `protobuf:"bytes,36,opt,name=box_removed,json=boxRemoved,proto3,oneof"`
}

type Event_PowerupDropped struct {
	PowerupDropped *PowerupDroppedData `protobuf:"bytes,37,opt,name=powerup_dropped,json=powerupDropped,proto3,oneof"`
}

type Event_PowerupConsumed struct {
	PowerupConsumed *PowerupConsumedData `protobuf:"bytes,38,opt,name=powerup_consumed,json=powerupConsumed,proto3,oneof"`
}

func (*Event_NewMatch) isEvent_Data() {}

func (*Event_Countdown) isEvent_Data() {}

func (*Event_GameOver) isEvent_Data() {}

func (*Event_Crash) isEvent_Data() {}

func (*Event_PlayerReady) isEvent_Data() {}

func (*Event_PlayerMove) isEvent_Data() {}

func (*Event_PlayerGetPowerup) isEvent_Data() {}

func (*Event_PlayerPlantBomb) isEvent_Data() {}

func (*Event_PlayerMoved) isEvent_Data() {}

func (*Event_PlayerDead) isEvent_Data() {}

func (*Event_BombPlanted) isEvent_Data() {}

func (*Event_BombWillExplode) isEvent_Data() {}

func (*Event_BombExploded) isEvent_Data() {}

func (*Event_BoxRemoved) isEvent_Data() {}

func (*Event_PowerupDropped) isEvent_Data() {}

func (*Event_PowerupConsumed) isEvent_Data() {}

type CountdownData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs int64 `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	EndTs   int64 `protobuf:"varint,2,opt,name=end_ts,json=endTs,proto3" json:"end_ts,omitempty"`
}

func (x *CountdownData) Reset() {
	*x = CountdownData{}
	mi := &file_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountdownData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountdownData) ProtoMessage() {}

func (x *CountdownData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountdownData.ProtoReflect.Descriptor instead.
func (*CountdownData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *CountdownData) GetStartTs() int64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *CountdownData) GetEndTs() int64 {
	if x != nil {
		return x.EndTs
	}
	return 0
}

type GameOverData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason       string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	WinnerUserId int32  `protobuf:"varint,2,opt,name=winner_user_id,json=winnerUserId,proto3" json:"winner_user_id,omitempty"`
}

func (x *GameOverData) Reset() {
	*x = GameOverData{}
	mi := &file_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameOverData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameOverData) ProtoMessage() {}

func (x *GameOverData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameOverData.ProtoReflect.Descriptor instead.
func (*GameOverData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *GameOverData) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GameOverData) GetWinnerUserId() int32 {
	if x != nil {
		return x.WinnerUserId
	}
	return 0
}

type CrashData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *CrashData) Reset() {
	*x = CrashData{}
	mi := &file_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrashData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrashData) ProtoMessage() {}

func (x *CrashData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrashData.ProtoReflect.Descriptor instead.
func (*CrashData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *CrashData) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type NewMatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []int32 `protobuf:"varint,1,rep,packed,name=players,proto3" json:"players,omitempty"`
}

func (x *NewMatchData) Reset() {
	*x = NewMatchData{}
	mi := &file_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewMatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMatchData) ProtoMessage() {}

func (x *NewMatchData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMatchData.ProtoReflect.Descriptor instead.
func (*NewMatchData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *NewMatchData) GetPlayers() []int32 {
	if x != nil {
		return x.Players
	}
	return nil
}

type PlayerReadyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *PlayerReadyData) Reset() {
	*x = PlayerReadyData{}
	mi := &file_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerReadyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerReadyData) ProtoMessage() {}

func (x *PlayerReadyData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerReadyData.ProtoReflect.Descriptor instead.
func (*PlayerReadyData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerReadyData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type PlayerMoveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	X      int32 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y      int32 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
	PixelX int32 `protobuf:"varint,4,opt,name=pixelX,proto3" json:"pixelX,omitempty"`
	PixelY int32 `protobuf:"varint,5,opt,name=pixelY,proto3" json:"pixelY,omitempty"`
}

func (x *PlayerMoveData) Reset() {
	*x = PlayerMoveData{}
	mi := &file_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerMoveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMoveData) ProtoMessage() {}

func (x *PlayerMoveData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMoveData.ProtoReflect.Descriptor instead.
func (*PlayerMoveData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *PlayerMoveData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlayerMoveData) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PlayerMoveData) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *PlayerMoveData) GetPixelX() int32 {
	if x != nil {
		return x.PixelX
	}
	return 0
}

func (x *PlayerMoveData) GetPixelY() int32 {
	if x != nil {
		return x.PixelY
	}
	return 0
}

type PlayerGetPowerupData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	X      int32 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y      int32 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *PlayerGetPowerupData) Reset() {
	*x = PlayerGetPowerupData{}
	mi := &file_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerGetPowerupData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGetPowerupData) ProtoMessage() {}

func (x *PlayerGetPowerupData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGetPowerupData.ProtoReflect.Descriptor instead.
func (*PlayerGetPowerupData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *PlayerGetPowerupData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlayerGetPowerupData) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PlayerGetPowerupData) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type PlayerPlantBombData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	X      int32 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y      int32 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *PlayerPlantBombData) Reset() {
	*x = PlayerPlantBombData{}
	mi := &file_common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerPlantBombData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPlantBombData) ProtoMessage() {}

func (x *PlayerPlantBombData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPlantBombData.ProtoReflect.Descriptor instead.
func (*PlayerPlantBombData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *PlayerPlantBombData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlayerPlantBombData) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PlayerPlantBombData) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type PlayerMovedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	X      int32 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y      int32 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
	PixelX int32 `protobuf:"varint,4,opt,name=pixelX,proto3" json:"pixelX,omitempty"`
	PixelY int32 `protobuf:"varint,5,opt,name=pixelY,proto3" json:"pixelY,omitempty"`
}

func (x *PlayerMovedData) Reset() {
	*x = PlayerMovedData{}
	mi := &file_common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerMovedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMovedData) ProtoMessage() {}

func (x *PlayerMovedData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMovedData.ProtoReflect.Descriptor instead.
func (*PlayerMovedData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *PlayerMovedData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlayerMovedData) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PlayerMovedData) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *PlayerMovedData) GetPixelX() int32 {
	if x != nil {
		return x.PixelX
	}
	return 0
}

func (x *PlayerMovedData) GetPixelY() int32 {
	if x != nil {
		return x.PixelY
	}
	return 0
}

type PlayerDeadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *PlayerDeadData) Reset() {
	*x = PlayerDeadData{}
	mi := &file_common_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerDeadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDeadData) ProtoMessage() {}

func (x *PlayerDeadData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDeadData.ProtoReflect.Descriptor instead.
func (*PlayerDeadData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerDeadData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type BombPlantedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X             int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	ExplodedAt    int64 `protobuf:"varint,3,opt,name=exploded_at,json=explodedAt,proto3" json:"exploded_at,omitempty"`
	UserId        int32 `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserBombcount int32 `protobuf:"varint,5,opt,name=user_bombcount,json=userBombcount,proto3" json:"user_bombcount,omitempty"`
}

func (x *BombPlantedData) Reset() {
	*x = BombPlantedData{}
	mi := &file_common_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombPlantedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombPlantedData) ProtoMessage() {}

func (x *BombPlantedData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombPlantedData.ProtoReflect.Descriptor instead.
func (*BombPlantedData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *BombPlantedData) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *BombPlantedData) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *BombPlantedData) GetExplodedAt() int64 {
	if x != nil {
		return x.ExplodedAt
	}
	return 0
}

func (x *BombPlantedData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BombPlantedData) GetUserBombcount() int32 {
	if x != nil {
		return x.UserBombcount
	}
	return 0
}

type BombWillExplodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X             int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	BombFirepower int32 `protobuf:"varint,3,opt,name=bomb_firepower,json=bombFirepower,proto3" json:"bomb_firepower,omitempty"`
	UserId        int32 `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *BombWillExplodeData) Reset() {
	*x = BombWillExplodeData{}
	mi := &file_common_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombWillExplodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombWillExplodeData) ProtoMessage() {}

func (x *BombWillExplodeData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombWillExplodeData.ProtoReflect.Descriptor instead.
func (*BombWillExplodeData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *BombWillExplodeData) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *BombWillExplodeData) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *BombWillExplodeData) GetBombFirepower() int32 {
	if x != nil {
		return x.BombFirepower
	}
	return 0
}

func (x *BombWillExplodeData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type BombExplodedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X             int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	BombFirepower int32 `protobuf:"varint,3,opt,name=bomb_firepower,json=bombFirepower,proto3" json:"bomb_firepower,omitempty"`
	UserId        int32 `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserBombcount int32 `protobuf:"varint,5,opt,name=user_bombcount,json=userBombcount,proto3" json:"user_bombcount,omitempty"`
}

func (x *BombExplodedData) Reset() {
	*x = BombExplodedData{}
	mi := &file_common_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombExplodedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombExplodedData) ProtoMessage() {}

func (x *BombExplodedData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombExplodedData.ProtoReflect.Descriptor instead.
func (*BombExplodedData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (x *BombExplodedData) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *BombExplodedData) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *BombExplodedData) GetBombFirepower() int32 {
	if x != nil {
		return x.BombFirepower
	}
	return 0
}

func (x *BombExplodedData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BombExplodedData) GetUserBombcount() int32 {
	if x != nil {
		return x.UserBombcount
	}
	return 0
}

type BoxRemovedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *BoxRemovedData) Reset() {
	*x = BoxRemovedData{}
	mi := &file_common_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoxRemovedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoxRemovedData) ProtoMessage() {}

func (x *BoxRemovedData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoxRemovedData.ProtoReflect.Descriptor instead.
func (*BoxRemovedData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *BoxRemovedData) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *BoxRemovedData) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type PowerupDroppedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X    int32       `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y    int32       `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Type PowerupType `protobuf:"varint,3,opt,name=type,proto3,enum=common.PowerupType" json:"type,omitempty"`
}

func (x *PowerupDroppedData) Reset() {
	*x = PowerupDroppedData{}
	mi := &file_common_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PowerupDroppedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerupDroppedData) ProtoMessage() {}

func (x *PowerupDroppedData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerupDroppedData.ProtoReflect.Descriptor instead.
func (*PowerupDroppedData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *PowerupDroppedData) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PowerupDroppedData) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *PowerupDroppedData) GetType() PowerupType {
	if x != nil {
		return x.Type
	}
	return PowerupType_MoreBomb
}

type PowerupConsumedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int32       `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	X             int32       `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y             int32       `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
	Type          PowerupType `protobuf:"varint,4,opt,name=type,proto3,enum=common.PowerupType" json:"type,omitempty"`
	UserBombcount int32       `protobuf:"varint,5,opt,name=user_bombcount,json=userBombcount,proto3" json:"user_bombcount,omitempty"`
	UserFirepower int32       `protobuf:"varint,6,opt,name=user_firepower,json=userFirepower,proto3" json:"user_firepower,omitempty"`
}

func (x *PowerupConsumedData) Reset() {
	*x = PowerupConsumedData{}
	mi := &file_common_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PowerupConsumedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerupConsumedData) ProtoMessage() {}

func (x *PowerupConsumedData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerupConsumedData.ProtoReflect.Descriptor instead.
func (*PowerupConsumedData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

func (x *PowerupConsumedData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PowerupConsumedData) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PowerupConsumedData) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *PowerupConsumedData) GetType() PowerupType {
	if x != nil {
		return x.Type
	}
	return PowerupType_MoreBomb
}

func (x *PowerupConsumedData) GetUserBombcount() int32 {
	if x != nil {
		return x.UserBombcount
	}
	return 0
}

func (x *PowerupConsumedData) GetUserFirepower() int32 {
	if x != nil {
		return x.UserFirepower
	}
	return 0
}

type PlayerPropertyDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	X         int32 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y         int32 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
	Firepower int32 `protobuf:"varint,4,opt,name=firepower,proto3" json:"firepower,omitempty"`
	Bombcount int32 `protobuf:"varint,5,opt,name=bombcount,proto3" json:"bombcount,omitempty"`
}

func (x *PlayerPropertyDto) Reset() {
	*x = PlayerPropertyDto{}
	mi := &file_common_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerPropertyDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPropertyDto) ProtoMessage() {}

func (x *PlayerPropertyDto) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPropertyDto.ProtoReflect.Descriptor instead.
func (*PlayerPropertyDto) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

func (x *PlayerPropertyDto) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlayerPropertyDto) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PlayerPropertyDto) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *PlayerPropertyDto) GetFirepower() int32 {
	if x != nil {
		return x.Firepower
	}
	return 0
}

func (x *PlayerPropertyDto) GetBombcount() int32 {
	if x != nil {
		return x.Bombcount
	}
	return 0
}

type TileDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Obstacle   *ObstacleDto   `protobuf:"bytes,1,opt,name=obstacle,proto3" json:"obstacle,omitempty"`
	Decoration *DecorationDto `protobuf:"bytes,2,opt,name=decoration,proto3" json:"decoration,omitempty"`
	Powerup    *PowerupDto    `protobuf:"bytes,3,opt,name=powerup,proto3" json:"powerup,omitempty"`
}

func (x *TileDto) Reset() {
	*x = TileDto{}
	mi := &file_common_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TileDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TileDto) ProtoMessage() {}

func (x *TileDto) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TileDto.ProtoReflect.Descriptor instead.
func (*TileDto) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

func (x *TileDto) GetObstacle() *ObstacleDto {
	if x != nil {
		return x.Obstacle
	}
	return nil
}

func (x *TileDto) GetDecoration() *DecorationDto {
	if x != nil {
		return x.Decoration
	}
	return nil
}

func (x *TileDto) GetPowerup() *PowerupDto {
	if x != nil {
		return x.Powerup
	}
	return nil
}

type ObstacleDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ObstacleType `protobuf:"varint,1,opt,name=type,proto3,enum=common.ObstacleType" json:"type,omitempty"`
}

func (x *ObstacleDto) Reset() {
	*x = ObstacleDto{}
	mi := &file_common_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObstacleDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObstacleDto) ProtoMessage() {}

func (x *ObstacleDto) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObstacleDto.ProtoReflect.Descriptor instead.
func (*ObstacleDto) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

func (x *ObstacleDto) GetType() ObstacleType {
	if x != nil {
		return x.Type
	}
	return ObstacleType_Box
}

type DecorationDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type DecorationType `protobuf:"varint,1,opt,name=type,proto3,enum=common.DecorationType" json:"type,omitempty"`
}

func (x *DecorationDto) Reset() {
	*x = DecorationDto{}
	mi := &file_common_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecorationDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecorationDto) ProtoMessage() {}

func (x *DecorationDto) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecorationDto.ProtoReflect.Descriptor instead.
func (*DecorationDto) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

func (x *DecorationDto) GetType() DecorationType {
	if x != nil {
		return x.Type
	}
	return DecorationType_Bush
}

type PowerupDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type PowerupType `protobuf:"varint,1,opt,name=type,proto3,enum=common.PowerupType" json:"type,omitempty"`
}

func (x *PowerupDto) Reset() {
	*x = PowerupDto{}
	mi := &file_common_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PowerupDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerupDto) ProtoMessage() {}

func (x *PowerupDto) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerupDto.ProtoReflect.Descriptor instead.
func (*PowerupDto) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

func (x *PowerupDto) GetType() PowerupType {
	if x != nil {
		return x.Type
	}
	return PowerupType_MoreBomb
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0xda, 0x08, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x05, 0x63, 0x72, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x05, 0x63, 0x72, 0x61, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d,
	0x6f, 0x76, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x75,
	0x70, 0x12, 0x49, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x42, 0x6f, 0x6d, 0x62, 0x12, 0x3c, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x65, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x11, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x77, 0x69, 0x6c, 0x6c,
	0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x57, 0x69, 0x6c, 0x6c,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x62,
	0x6f, 0x6d, 0x62, 0x57, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x12, 0x3f,
	0x0a, 0x0d, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x6f, 0x6d, 0x62, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6d, 0x62, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x0b, 0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f,
	0x78, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x6f, 0x78, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x75, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x75, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x65, 0x6e, 0x64, 0x54, 0x73, 0x22, 0x4c, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x09, 0x43, 0x72, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x0c, 0x4e, 0x65, 0x77,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x22, 0x2a, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x75, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x58,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x58, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x59, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x70, 0x69, 0x78, 0x65, 0x6c, 0x59, 0x22, 0x4b, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x79, 0x22, 0x4a, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22,
	0x76, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x78, 0x65, 0x6c,
	0x58, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x58, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x59, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x59, 0x22, 0x29, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x6d, 0x62, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x71, 0x0a, 0x13, 0x42, 0x6f, 0x6d, 0x62, 0x57, 0x69, 0x6c, 0x6c, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x66,
	0x69, 0x72, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x62, 0x6f, 0x6d, 0x62, 0x46, 0x69, 0x72, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x42, 0x6f, 0x6d, 0x62, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x6d, 0x62, 0x5f,
	0x66, 0x69, 0x72, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x62, 0x6f, 0x6d, 0x62, 0x46, 0x69, 0x72, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x6d, 0x62, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x6d, 0x62, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2c,
	0x0a, 0x0e, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0x59, 0x0a, 0x12,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x27,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x6d, 0x62, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72,
	0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x11,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x74,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x65, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x72, 0x65, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x6d, 0x62, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x6d, 0x62, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x07, 0x54, 0x69, 0x6c, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x2f,
	0x0a, 0x08, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63,
	0x6c, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x12,
	0x35, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x44, 0x74, 0x6f, 0x52, 0x07, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x75, 0x70, 0x22, 0x37, 0x0a, 0x0b, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65,
	0x44, 0x74, 0x6f, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x73, 0x74, 0x61,
	0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3b, 0x0a,
	0x0d, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x6f, 0x12, 0x2a,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x35, 0x0a, 0x0a, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x75, 0x70, 0x44, 0x74, 0x6f, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x2a, 0x79, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x10,
	0x06, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x72, 0x61, 0x73, 0x68, 0x10, 0x07, 0x2a, 0xc0, 0x03, 0x0a,
	0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x64, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x05, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x10,
	0x06, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x6f, 0x76, 0x65, 0x72, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x61, 0x73, 0x68, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65,
	0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x42, 0x6f, 0x6d, 0x62, 0x10, 0x18, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x1f, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x61, 0x64, 0x10, 0x20, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x21, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x6f, 0x6d, 0x62, 0x57, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x64, 0x65, 0x10, 0x22, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x6f, 0x6d, 0x62, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x64, 0x65, 0x64, 0x10, 0x23, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x75,
	0x70, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x25, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x10, 0x26, 0x2a,
	0x36, 0x0a, 0x0c, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x6f, 0x78, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x72, 0x65, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x42, 0x6f, 0x6d, 0x62, 0x10, 0x03, 0x2a, 0x1a, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x75, 0x73,
	0x68, 0x10, 0x00, 0x2a, 0x29, 0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x6d, 0x62, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x72, 0x65, 0x10, 0x01, 0x42, 0x0d,
	0x5a, 0x0b, 0x2e, 0x2f, 0x70, 0x6b, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_common_proto_goTypes = []any{
	(GameState)(0),               // 0: common.GameState
	(EventType)(0),               // 1: common.EventType
	(ObstacleType)(0),            // 2: common.ObstacleType
	(DecorationType)(0),          // 3: common.DecorationType
	(PowerupType)(0),             // 4: common.PowerupType
	(*Event)(nil),                // 5: common.Event
	(*CountdownData)(nil),        // 6: common.CountdownData
	(*GameOverData)(nil),         // 7: common.GameOverData
	(*CrashData)(nil),            // 8: common.CrashData
	(*NewMatchData)(nil),         // 9: common.NewMatchData
	(*PlayerReadyData)(nil),      // 10: common.PlayerReadyData
	(*PlayerMoveData)(nil),       // 11: common.PlayerMoveData
	(*PlayerGetPowerupData)(nil), // 12: common.PlayerGetPowerupData
	(*PlayerPlantBombData)(nil),  // 13: common.PlayerPlantBombData
	(*PlayerMovedData)(nil),      // 14: common.PlayerMovedData
	(*PlayerDeadData)(nil),       // 15: common.PlayerDeadData
	(*BombPlantedData)(nil),      // 16: common.BombPlantedData
	(*BombWillExplodeData)(nil),  // 17: common.BombWillExplodeData
	(*BombExplodedData)(nil),     // 18: common.BombExplodedData
	(*BoxRemovedData)(nil),       // 19: common.BoxRemovedData
	(*PowerupDroppedData)(nil),   // 20: common.PowerupDroppedData
	(*PowerupConsumedData)(nil),  // 21: common.PowerupConsumedData
	(*PlayerPropertyDto)(nil),    // 22: common.PlayerPropertyDto
	(*TileDto)(nil),              // 23: common.TileDto
	(*ObstacleDto)(nil),          // 24: common.ObstacleDto
	(*DecorationDto)(nil),        // 25: common.DecorationDto
	(*PowerupDto)(nil),           // 26: common.PowerupDto
}
var file_common_proto_depIdxs = []int32{
	1,  // 0: common.Event.type:type_name -> common.EventType
	9,  // 1: common.Event.new_match:type_name -> common.NewMatchData
	6,  // 2: common.Event.countdown:type_name -> common.CountdownData
	7,  // 3: common.Event.game_over:type_name -> common.GameOverData
	8,  // 4: common.Event.crash:type_name -> common.CrashData
	10, // 5: common.Event.player_ready:type_name -> common.PlayerReadyData
	11, // 6: common.Event.player_move:type_name -> common.PlayerMoveData
	12, // 7: common.Event.player_get_powerup:type_name -> common.PlayerGetPowerupData
	13, // 8: common.Event.player_plant_bomb:type_name -> common.PlayerPlantBombData
	14, // 9: common.Event.player_moved:type_name -> common.PlayerMovedData
	15, // 10: common.Event.player_dead:type_name -> common.PlayerDeadData
	16, // 11: common.Event.bomb_planted:type_name -> common.BombPlantedData
	17, // 12: common.Event.bomb_will_explode:type_name -> common.BombWillExplodeData
	18, // 13: common.Event.bomb_exploded:type_name -> common.BombExplodedData
	19, // 14: common.Event.box_removed:type_name -> common.BoxRemovedData
	20, // 15: common.Event.powerup_dropped:type_name -> common.PowerupDroppedData
	21, // 16: common.Event.powerup_consumed:type_name -> common.PowerupConsumedData
	4,  // 17: common.PowerupDroppedData.type:type_name -> common.PowerupType
	4,  // 18: common.PowerupConsumedData.type:type_name -> common.PowerupType
	24, // 19: common.TileDto.obstacle:type_name -> common.ObstacleDto
	25, // 20: common.TileDto.decoration:type_name -> common.DecorationDto
	26, // 21: common.TileDto.powerup:type_name -> common.PowerupDto
	2,  // 22: common.ObstacleDto.type:type_name -> common.ObstacleType
	3,  // 23: common.DecorationDto.type:type_name -> common.DecorationType
	4,  // 24: common.PowerupDto.type:type_name -> common.PowerupType
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	file_common_proto_msgTypes[0].OneofWrappers = []any{
		(*Event_NewMatch)(nil),
		(*Event_Countdown)(nil),
		(*Event_GameOver)(nil),
		(*Event_Crash)(nil),
		(*Event_PlayerReady)(nil),
		(*Event_PlayerMove)(nil),
		(*Event_PlayerGetPowerup)(nil),
		(*Event_PlayerPlantBomb)(nil),
		(*Event_PlayerMoved)(nil),
		(*Event_PlayerDead)(nil),
		(*Event_BombPlanted)(nil),
		(*Event_BombWillExplode)(nil),
		(*Event_BombExploded)(nil),
		(*Event_BoxRemoved)(nil),
		(*Event_PowerupDropped)(nil),
		(*Event_PowerupConsumed)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}

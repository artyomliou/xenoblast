// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: matchmaking.proto

package matchmaking

import (
	pkg_proto "artyomliou/xenoblast-backend/internal/pkg_proto"
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MatchmakingService_Enroll_FullMethodName         = "/matchmaking.MatchmakingService/Enroll"
	MatchmakingService_Cancel_FullMethodName         = "/matchmaking.MatchmakingService/Cancel"
	MatchmakingService_SubscribeMatch_FullMethodName = "/matchmaking.MatchmakingService/SubscribeMatch"
)

// MatchmakingServiceClient is the client API for MatchmakingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchmakingServiceClient interface {
	Enroll(ctx context.Context, in *MatchmakingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Cancel(ctx context.Context, in *MatchmakingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SubscribeMatch(ctx context.Context, in *MatchmakingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[pkg_proto.Event], error)
}

type matchmakingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchmakingServiceClient(cc grpc.ClientConnInterface) MatchmakingServiceClient {
	return &matchmakingServiceClient{cc}
}

func (c *matchmakingServiceClient) Enroll(ctx context.Context, in *MatchmakingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, MatchmakingService_Enroll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) Cancel(ctx context.Context, in *MatchmakingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, MatchmakingService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) SubscribeMatch(ctx context.Context, in *MatchmakingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[pkg_proto.Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MatchmakingService_ServiceDesc.Streams[0], MatchmakingService_SubscribeMatch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MatchmakingRequest, pkg_proto.Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MatchmakingService_SubscribeMatchClient = grpc.ServerStreamingClient[pkg_proto.Event]

// MatchmakingServiceServer is the server API for MatchmakingService service.
// All implementations must embed UnimplementedMatchmakingServiceServer
// for forward compatibility.
type MatchmakingServiceServer interface {
	Enroll(context.Context, *MatchmakingRequest) (*empty.Empty, error)
	Cancel(context.Context, *MatchmakingRequest) (*empty.Empty, error)
	SubscribeMatch(*MatchmakingRequest, grpc.ServerStreamingServer[pkg_proto.Event]) error
	mustEmbedUnimplementedMatchmakingServiceServer()
}

// UnimplementedMatchmakingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchmakingServiceServer struct{}

func (UnimplementedMatchmakingServiceServer) Enroll(context.Context, *MatchmakingRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enroll not implemented")
}
func (UnimplementedMatchmakingServiceServer) Cancel(context.Context, *MatchmakingRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedMatchmakingServiceServer) SubscribeMatch(*MatchmakingRequest, grpc.ServerStreamingServer[pkg_proto.Event]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMatch not implemented")
}
func (UnimplementedMatchmakingServiceServer) mustEmbedUnimplementedMatchmakingServiceServer() {}
func (UnimplementedMatchmakingServiceServer) testEmbeddedByValue()                            {}

// UnsafeMatchmakingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchmakingServiceServer will
// result in compilation errors.
type UnsafeMatchmakingServiceServer interface {
	mustEmbedUnimplementedMatchmakingServiceServer()
}

func RegisterMatchmakingServiceServer(s grpc.ServiceRegistrar, srv MatchmakingServiceServer) {
	// If the following call pancis, it indicates UnimplementedMatchmakingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MatchmakingService_ServiceDesc, srv)
}

func _MatchmakingService_Enroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchmakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).Enroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchmakingService_Enroll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).Enroll(ctx, req.(*MatchmakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchmakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchmakingService_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).Cancel(ctx, req.(*MatchmakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_SubscribeMatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MatchmakingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchmakingServiceServer).SubscribeMatch(m, &grpc.GenericServerStream[MatchmakingRequest, pkg_proto.Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MatchmakingService_SubscribeMatchServer = grpc.ServerStreamingServer[pkg_proto.Event]

// MatchmakingService_ServiceDesc is the grpc.ServiceDesc for MatchmakingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchmakingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matchmaking.MatchmakingService",
	HandlerType: (*MatchmakingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enroll",
			Handler:    _MatchmakingService_Enroll_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _MatchmakingService_Cancel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeMatch",
			Handler:       _MatchmakingService_SubscribeMatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "matchmaking.proto",
}
